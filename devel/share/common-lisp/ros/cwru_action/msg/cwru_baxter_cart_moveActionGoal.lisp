; Auto-generated. Do not edit!


(cl:in-package cwru_action-msg)


;//! \htmlinclude cwru_baxter_cart_moveActionGoal.msg.html

(cl:defclass <cwru_baxter_cart_moveActionGoal> (roslisp-msg-protocol:ros-message)
  ((header
    :reader header
    :initarg :header
    :type std_msgs-msg:Header
    :initform (cl:make-instance 'std_msgs-msg:Header))
   (goal_id
    :reader goal_id
    :initarg :goal_id
    :type actionlib_msgs-msg:GoalID
    :initform (cl:make-instance 'actionlib_msgs-msg:GoalID))
   (goal
    :reader goal
    :initarg :goal
    :type cwru_action-msg:cwru_baxter_cart_moveGoal
    :initform (cl:make-instance 'cwru_action-msg:cwru_baxter_cart_moveGoal)))
)

(cl:defclass cwru_baxter_cart_moveActionGoal (<cwru_baxter_cart_moveActionGoal>)
  ())

(cl:defmethod cl:initialize-instance :after ((m <cwru_baxter_cart_moveActionGoal>) cl:&rest args)
  (cl:declare (cl:ignorable args))
  (cl:unless (cl:typep m 'cwru_baxter_cart_moveActionGoal)
    (roslisp-msg-protocol:msg-deprecation-warning "using old message class name cwru_action-msg:<cwru_baxter_cart_moveActionGoal> is deprecated: use cwru_action-msg:cwru_baxter_cart_moveActionGoal instead.")))

(cl:ensure-generic-function 'header-val :lambda-list '(m))
(cl:defmethod header-val ((m <cwru_baxter_cart_moveActionGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader cwru_action-msg:header-val is deprecated.  Use cwru_action-msg:header instead.")
  (header m))

(cl:ensure-generic-function 'goal_id-val :lambda-list '(m))
(cl:defmethod goal_id-val ((m <cwru_baxter_cart_moveActionGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader cwru_action-msg:goal_id-val is deprecated.  Use cwru_action-msg:goal_id instead.")
  (goal_id m))

(cl:ensure-generic-function 'goal-val :lambda-list '(m))
(cl:defmethod goal-val ((m <cwru_baxter_cart_moveActionGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader cwru_action-msg:goal-val is deprecated.  Use cwru_action-msg:goal instead.")
  (goal m))
(cl:defmethod roslisp-msg-protocol:serialize ((msg <cwru_baxter_cart_moveActionGoal>) ostream)
  "Serializes a message object of type '<cwru_baxter_cart_moveActionGoal>"
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'header) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'goal_id) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'goal) ostream)
)
(cl:defmethod roslisp-msg-protocol:deserialize ((msg <cwru_baxter_cart_moveActionGoal>) istream)
  "Deserializes a message object of type '<cwru_baxter_cart_moveActionGoal>"
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'header) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'goal_id) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'goal) istream)
  msg
)
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<cwru_baxter_cart_moveActionGoal>)))
  "Returns string type for a message object of type '<cwru_baxter_cart_moveActionGoal>"
  "cwru_action/cwru_baxter_cart_moveActionGoal")
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'cwru_baxter_cart_moveActionGoal)))
  "Returns string type for a message object of type 'cwru_baxter_cart_moveActionGoal"
  "cwru_action/cwru_baxter_cart_moveActionGoal")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<cwru_baxter_cart_moveActionGoal>)))
  "Returns md5sum for a message object of type '<cwru_baxter_cart_moveActionGoal>"
  "0dd8083c14e4b775a204ee3c6bf9d4ed")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'cwru_baxter_cart_moveActionGoal)))
  "Returns md5sum for a message object of type 'cwru_baxter_cart_moveActionGoal"
  "0dd8083c14e4b775a204ee3c6bf9d4ed")
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<cwru_baxter_cart_moveActionGoal>)))
  "Returns full string definition for message of type '<cwru_baxter_cart_moveActionGoal>"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalID goal_id~%cwru_baxter_cart_moveGoal goal~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%# 0: no frame~%# 1: global frame~%string frame_id~%~%================================================================================~%MSG: actionlib_msgs/GoalID~%# The stamp should store the time at which this goal was requested.~%# It is used by an action server when it tries to preempt all~%# goals that were requested before a certain time~%time stamp~%~%# The id provides a way to associate feedback and~%# result message with specific goal requests. The id~%# specified must be unique.~%string id~%~%~%================================================================================~%MSG: cwru_action/cwru_baxter_cart_moveGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%#This action message is specialized for Baxter~%#minimally, it may contain just a command code~%#more generally, it may contain desired left and right tool-frame poses, as well~%# as gripper poses (gripper opening--interpreted for specific grippers, e.g. Yale hand)~%# and an arrival time for the move~%# It is assumed that a move starts from the previous commanded pose, or from the current joint state~%~%#return codes provide status info, e.g. if a proposed move is reachable~%~%#define message constants:~%uint8 ARM_TEST_MODE =0~%~%#queries~%uint8 ARM_IS_SERVER_BUSY_QUERY = 1~%~%uint8 ARM_QUERY_IS_PATH_VALID = 2~%uint8 RT_ARM_GET_Q_DATA = 3~%uint8 LEFT_ARM_GET_Q_DATA = 4~%uint8 RT_ARM_GET_TOOL_POSE = 5~%uint8 LEFT_ARM_GET_TOOL_POSE = 5~%~%#requests for motion plans; need to extend this to left arm and both arms~%uint8 RT_ARM_PLAN_PATH_CURRENT_TO_GOAL_POSE=20 #plan paths from current arm pose~%uint8 RT_ARM_PLAN_PATH_CURRENT_TO_PRE_POSE=21~%~%uint8 RT_ARM_PLAN_JSPACE_PATH_CURRENT_TO_PRE_POSE=22~%uint8 RT_ARM_PLAN_JSPACE_PATH_CURRENT_TO_QGOAL=23~%~%#cartesian path from specified joint-space start and end;~%# orientation interpolation is a bit odd~%uint8 RT_ARM_PLAN_PATH_QSTART_TO_QGOAL = 25~%uint8 RT_ARM_PLAN_PATH_QSTART_TO_ADES = 24 #specify start and end, j-space start, affine desired end~%~%#uint8 RT_ARM_PLAN_PATH_ASTART_TO_QGOAL = 26 #specified affine start, joint-space goal~%uint8 RT_ARM_PLAN_PATH_CURRENT_TO_GOAL_DP_XYZ = 27 #rectilinear translation w/ fixed orientation~%~%# request to preview plan:~%uint8 RT_ARM_DISPLAY_TRAJECTORY = 50~%~%#MOVE commands!~%uint8 RT_ARM_EXECUTE_PLANNED_PATH = 100~%~%#uint8 RT_ARM_DESCEND_20CM=101~%#uint8 RT_ARM_DEPART_20CM=102~%~%~%#goal:~%int32 command_code~%geometry_msgs/PoseStamped des_pose_gripper_right~%geometry_msgs/PoseStamped des_pose_gripper_left~%float64 gripper_opening_right~%float64 gripper_opening_left~%float64[] arm_dp_right #to command a 3-D vector displacement relative to current pose, fixed orientation~%float64[] arm_dp_left~%float64[] q_goal_right~%float64[] q_goal_left~%float64 move_time~%~%================================================================================~%MSG: geometry_msgs/PoseStamped~%# A Pose with reference coordinate frame and timestamp~%Header header~%Pose pose~%~%================================================================================~%MSG: geometry_msgs/Pose~%# A representation of pose in free space, composed of postion and orientation. ~%Point position~%Quaternion orientation~%~%================================================================================~%MSG: geometry_msgs/Point~%# This contains the position of a point in free space~%float64 x~%float64 y~%float64 z~%~%================================================================================~%MSG: geometry_msgs/Quaternion~%# This represents an orientation in free space in quaternion form.~%~%float64 x~%float64 y~%float64 z~%float64 w~%~%~%"))
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'cwru_baxter_cart_moveActionGoal)))
  "Returns full string definition for message of type 'cwru_baxter_cart_moveActionGoal"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalID goal_id~%cwru_baxter_cart_moveGoal goal~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%# 0: no frame~%# 1: global frame~%string frame_id~%~%================================================================================~%MSG: actionlib_msgs/GoalID~%# The stamp should store the time at which this goal was requested.~%# It is used by an action server when it tries to preempt all~%# goals that were requested before a certain time~%time stamp~%~%# The id provides a way to associate feedback and~%# result message with specific goal requests. The id~%# specified must be unique.~%string id~%~%~%================================================================================~%MSG: cwru_action/cwru_baxter_cart_moveGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%#This action message is specialized for Baxter~%#minimally, it may contain just a command code~%#more generally, it may contain desired left and right tool-frame poses, as well~%# as gripper poses (gripper opening--interpreted for specific grippers, e.g. Yale hand)~%# and an arrival time for the move~%# It is assumed that a move starts from the previous commanded pose, or from the current joint state~%~%#return codes provide status info, e.g. if a proposed move is reachable~%~%#define message constants:~%uint8 ARM_TEST_MODE =0~%~%#queries~%uint8 ARM_IS_SERVER_BUSY_QUERY = 1~%~%uint8 ARM_QUERY_IS_PATH_VALID = 2~%uint8 RT_ARM_GET_Q_DATA = 3~%uint8 LEFT_ARM_GET_Q_DATA = 4~%uint8 RT_ARM_GET_TOOL_POSE = 5~%uint8 LEFT_ARM_GET_TOOL_POSE = 5~%~%#requests for motion plans; need to extend this to left arm and both arms~%uint8 RT_ARM_PLAN_PATH_CURRENT_TO_GOAL_POSE=20 #plan paths from current arm pose~%uint8 RT_ARM_PLAN_PATH_CURRENT_TO_PRE_POSE=21~%~%uint8 RT_ARM_PLAN_JSPACE_PATH_CURRENT_TO_PRE_POSE=22~%uint8 RT_ARM_PLAN_JSPACE_PATH_CURRENT_TO_QGOAL=23~%~%#cartesian path from specified joint-space start and end;~%# orientation interpolation is a bit odd~%uint8 RT_ARM_PLAN_PATH_QSTART_TO_QGOAL = 25~%uint8 RT_ARM_PLAN_PATH_QSTART_TO_ADES = 24 #specify start and end, j-space start, affine desired end~%~%#uint8 RT_ARM_PLAN_PATH_ASTART_TO_QGOAL = 26 #specified affine start, joint-space goal~%uint8 RT_ARM_PLAN_PATH_CURRENT_TO_GOAL_DP_XYZ = 27 #rectilinear translation w/ fixed orientation~%~%# request to preview plan:~%uint8 RT_ARM_DISPLAY_TRAJECTORY = 50~%~%#MOVE commands!~%uint8 RT_ARM_EXECUTE_PLANNED_PATH = 100~%~%#uint8 RT_ARM_DESCEND_20CM=101~%#uint8 RT_ARM_DEPART_20CM=102~%~%~%#goal:~%int32 command_code~%geometry_msgs/PoseStamped des_pose_gripper_right~%geometry_msgs/PoseStamped des_pose_gripper_left~%float64 gripper_opening_right~%float64 gripper_opening_left~%float64[] arm_dp_right #to command a 3-D vector displacement relative to current pose, fixed orientation~%float64[] arm_dp_left~%float64[] q_goal_right~%float64[] q_goal_left~%float64 move_time~%~%================================================================================~%MSG: geometry_msgs/PoseStamped~%# A Pose with reference coordinate frame and timestamp~%Header header~%Pose pose~%~%================================================================================~%MSG: geometry_msgs/Pose~%# A representation of pose in free space, composed of postion and orientation. ~%Point position~%Quaternion orientation~%~%================================================================================~%MSG: geometry_msgs/Point~%# This contains the position of a point in free space~%float64 x~%float64 y~%float64 z~%~%================================================================================~%MSG: geometry_msgs/Quaternion~%# This represents an orientation in free space in quaternion form.~%~%float64 x~%float64 y~%float64 z~%float64 w~%~%~%"))
(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <cwru_baxter_cart_moveActionGoal>))
  (cl:+ 0
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'header))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'goal_id))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'goal))
))
(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <cwru_baxter_cart_moveActionGoal>))
  "Converts a ROS message object to a list"
  (cl:list 'cwru_baxter_cart_moveActionGoal
    (cl:cons ':header (header msg))
    (cl:cons ':goal_id (goal_id msg))
    (cl:cons ':goal (goal msg))
))
