// Generated by gencpp from file cwru_srv/arm_nav_service_messageResponse.msg
// DO NOT EDIT!


#ifndef CWRU_SRV_MESSAGE_ARM_NAV_SERVICE_MESSAGERESPONSE_H
#define CWRU_SRV_MESSAGE_ARM_NAV_SERVICE_MESSAGERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cwru_srv
{
template <class ContainerAllocator>
struct arm_nav_service_messageResponse_
{
  typedef arm_nav_service_messageResponse_<ContainerAllocator> Type;

  arm_nav_service_messageResponse_()
    : bool_resp(false)
    , rtn_code(0)
    , plan_id(0)
    , q_vec_start()
    , q_vec_end()  {
    }
  arm_nav_service_messageResponse_(const ContainerAllocator& _alloc)
    : bool_resp(false)
    , rtn_code(0)
    , plan_id(0)
    , q_vec_start(_alloc)
    , q_vec_end(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _bool_resp_type;
  _bool_resp_type bool_resp;

   typedef int32_t _rtn_code_type;
  _rtn_code_type rtn_code;

   typedef int32_t _plan_id_type;
  _plan_id_type plan_id;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _q_vec_start_type;
  _q_vec_start_type q_vec_start;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _q_vec_end_type;
  _q_vec_end_type q_vec_end;




  typedef boost::shared_ptr< ::cwru_srv::arm_nav_service_messageResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cwru_srv::arm_nav_service_messageResponse_<ContainerAllocator> const> ConstPtr;

}; // struct arm_nav_service_messageResponse_

typedef ::cwru_srv::arm_nav_service_messageResponse_<std::allocator<void> > arm_nav_service_messageResponse;

typedef boost::shared_ptr< ::cwru_srv::arm_nav_service_messageResponse > arm_nav_service_messageResponsePtr;
typedef boost::shared_ptr< ::cwru_srv::arm_nav_service_messageResponse const> arm_nav_service_messageResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cwru_srv::arm_nav_service_messageResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cwru_srv::arm_nav_service_messageResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cwru_srv

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cwru_srv::arm_nav_service_messageResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cwru_srv::arm_nav_service_messageResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cwru_srv::arm_nav_service_messageResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cwru_srv::arm_nav_service_messageResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cwru_srv::arm_nav_service_messageResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cwru_srv::arm_nav_service_messageResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cwru_srv::arm_nav_service_messageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7be7d6760d514db19683d49354227da6";
  }

  static const char* value(const ::cwru_srv::arm_nav_service_messageResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7be7d6760d514db1ULL;
  static const uint64_t static_value2 = 0x9683d49354227da6ULL;
};

template<class ContainerAllocator>
struct DataType< ::cwru_srv::arm_nav_service_messageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cwru_srv/arm_nav_service_messageResponse";
  }

  static const char* value(const ::cwru_srv::arm_nav_service_messageResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cwru_srv::arm_nav_service_messageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
bool bool_resp\n\
\n\
\n\
int32 rtn_code\n\
\n\
\n\
\n\
int32 plan_id\n\
\n\
\n\
float32[] q_vec_start\n\
float32[] q_vec_end\n\
\n\
";
  }

  static const char* value(const ::cwru_srv::arm_nav_service_messageResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cwru_srv::arm_nav_service_messageResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bool_resp);
      stream.next(m.rtn_code);
      stream.next(m.plan_id);
      stream.next(m.q_vec_start);
      stream.next(m.q_vec_end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arm_nav_service_messageResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cwru_srv::arm_nav_service_messageResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cwru_srv::arm_nav_service_messageResponse_<ContainerAllocator>& v)
  {
    s << indent << "bool_resp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bool_resp);
    s << indent << "rtn_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rtn_code);
    s << indent << "plan_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.plan_id);
    s << indent << "q_vec_start[]" << std::endl;
    for (size_t i = 0; i < v.q_vec_start.size(); ++i)
    {
      s << indent << "  q_vec_start[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.q_vec_start[i]);
    }
    s << indent << "q_vec_end[]" << std::endl;
    for (size_t i = 0; i < v.q_vec_end.size(); ++i)
    {
      s << indent << "  q_vec_end[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.q_vec_end[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CWRU_SRV_MESSAGE_ARM_NAV_SERVICE_MESSAGERESPONSE_H
