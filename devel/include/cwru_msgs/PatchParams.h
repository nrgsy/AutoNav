// Generated by gencpp from file cwru_msgs/PatchParams.msg
// DO NOT EDIT!


#ifndef CWRU_MSGS_MESSAGE_PATCHPARAMS_H
#define CWRU_MSGS_MESSAGE_PATCHPARAMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cwru_msgs
{
template <class ContainerAllocator>
struct PatchParams_
{
  typedef PatchParams_<ContainerAllocator> Type;

  PatchParams_()
    : centroid()
    , normal_vec()
    , offset(0.0)
    , frame_id()  {
    }
  PatchParams_(const ContainerAllocator& _alloc)
    : centroid(_alloc)
    , normal_vec(_alloc)
    , offset(0.0)
    , frame_id(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _centroid_type;
  _centroid_type centroid;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _normal_vec_type;
  _normal_vec_type normal_vec;

   typedef double _offset_type;
  _offset_type offset;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;




  typedef boost::shared_ptr< ::cwru_msgs::PatchParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cwru_msgs::PatchParams_<ContainerAllocator> const> ConstPtr;

}; // struct PatchParams_

typedef ::cwru_msgs::PatchParams_<std::allocator<void> > PatchParams;

typedef boost::shared_ptr< ::cwru_msgs::PatchParams > PatchParamsPtr;
typedef boost::shared_ptr< ::cwru_msgs::PatchParams const> PatchParamsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cwru_msgs::PatchParams_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cwru_msgs::PatchParams_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cwru_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'cwru_msgs': ['/home/thomas/ros_ws/src/cwru/cwru_msgs/cwru_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cwru_msgs::PatchParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cwru_msgs::PatchParams_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cwru_msgs::PatchParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cwru_msgs::PatchParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cwru_msgs::PatchParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cwru_msgs::PatchParams_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cwru_msgs::PatchParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e1ad50e23fc909e2a83662c92134d2e0";
  }

  static const char* value(const ::cwru_msgs::PatchParams_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe1ad50e23fc909e2ULL;
  static const uint64_t static_value2 = 0xa83662c92134d2e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::cwru_msgs::PatchParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cwru_msgs/PatchParams";
  }

  static const char* value(const ::cwru_msgs::PatchParams_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cwru_msgs::PatchParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#patch params: parameters describing a planar patch\n\
#a geometric planar fit to the patch is described in terms of a normal vector and \n\
#distance of the plane from the origin of the reference frame\n\
#also provide centroid of the plane\n\
float64[] centroid # 3-D x,y,z centroid of the patch\n\
float64[] normal_vec # nx, ny, nz normal vector of the planar patch\n\
float64 offset # distance of the geometric plane from the reference-frame origin\n\
string frame_id #desirably, specify the reference frame for the data contained herein\n\
";
  }

  static const char* value(const ::cwru_msgs::PatchParams_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cwru_msgs::PatchParams_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.centroid);
      stream.next(m.normal_vec);
      stream.next(m.offset);
      stream.next(m.frame_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PatchParams_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cwru_msgs::PatchParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cwru_msgs::PatchParams_<ContainerAllocator>& v)
  {
    s << indent << "centroid[]" << std::endl;
    for (size_t i = 0; i < v.centroid.size(); ++i)
    {
      s << indent << "  centroid[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.centroid[i]);
    }
    s << indent << "normal_vec[]" << std::endl;
    for (size_t i = 0; i < v.normal_vec.size(); ++i)
    {
      s << indent << "  normal_vec[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.normal_vec[i]);
    }
    s << indent << "offset: ";
    Printer<double>::stream(s, indent + "  ", v.offset);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CWRU_MSGS_MESSAGE_PATCHPARAMS_H
