// Generated by gencpp from file cwru_msgs/DesiredState.msg
// DO NOT EDIT!


#ifndef CWRU_MSGS_MESSAGE_DESIREDSTATE_H
#define CWRU_MSGS_MESSAGE_DESIREDSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>

namespace cwru_msgs
{
template <class ContainerAllocator>
struct DesiredState_
{
  typedef DesiredState_<ContainerAllocator> Type;

  DesiredState_()
    : header()
    , seg_type(0)
    , seg_number(0)
    , des_pose()
    , des_speed(0.0)
    , des_rho(0.0)
    , des_lseg(0.0)  {
    }
  DesiredState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , seg_type(0)
    , seg_number(0)
    , des_pose(_alloc)
    , des_speed(0.0)
    , des_rho(0.0)
    , des_lseg(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _seg_type_type;
  _seg_type_type seg_type;

   typedef uint32_t _seg_number_type;
  _seg_number_type seg_number;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _des_pose_type;
  _des_pose_type des_pose;

   typedef double _des_speed_type;
  _des_speed_type des_speed;

   typedef double _des_rho_type;
  _des_rho_type des_rho;

   typedef double _des_lseg_type;
  _des_lseg_type des_lseg;




  typedef boost::shared_ptr< ::cwru_msgs::DesiredState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cwru_msgs::DesiredState_<ContainerAllocator> const> ConstPtr;

}; // struct DesiredState_

typedef ::cwru_msgs::DesiredState_<std::allocator<void> > DesiredState;

typedef boost::shared_ptr< ::cwru_msgs::DesiredState > DesiredStatePtr;
typedef boost::shared_ptr< ::cwru_msgs::DesiredState const> DesiredStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cwru_msgs::DesiredState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cwru_msgs::DesiredState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cwru_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'cwru_msgs': ['/home/thomas/ros_ws/src/cwru/cwru_msgs/cwru_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cwru_msgs::DesiredState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cwru_msgs::DesiredState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cwru_msgs::DesiredState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cwru_msgs::DesiredState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cwru_msgs::DesiredState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cwru_msgs::DesiredState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cwru_msgs::DesiredState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a022665b62e846aae599403b4b5aab1";
  }

  static const char* value(const ::cwru_msgs::DesiredState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a022665b62e846aULL;
  static const uint64_t static_value2 = 0xae599403b4b5aab1ULL;
};

template<class ContainerAllocator>
struct DataType< ::cwru_msgs::DesiredState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cwru_msgs/DesiredState";
  }

  static const char* value(const ::cwru_msgs::DesiredState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cwru_msgs::DesiredState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Standard ROS header for timestamp and frame_id\n\
Header header\n\
\n\
#Segment type\n\
int8 seg_type\n\
\n\
#Segment number\n\
uint32 seg_number\n\
\n\
#6DOF pose\n\
geometry_msgs/Pose des_pose\n\
\n\
#Desired speed\n\
float64 des_speed\n\
\n\
#Desired curvature\n\
float64 des_rho\n\
\n\
#Desired distance along the segment\n\
float64 des_lseg\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::cwru_msgs::DesiredState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cwru_msgs::DesiredState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.seg_type);
      stream.next(m.seg_number);
      stream.next(m.des_pose);
      stream.next(m.des_speed);
      stream.next(m.des_rho);
      stream.next(m.des_lseg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DesiredState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cwru_msgs::DesiredState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cwru_msgs::DesiredState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "seg_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.seg_type);
    s << indent << "seg_number: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seg_number);
    s << indent << "des_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.des_pose);
    s << indent << "des_speed: ";
    Printer<double>::stream(s, indent + "  ", v.des_speed);
    s << indent << "des_rho: ";
    Printer<double>::stream(s, indent + "  ", v.des_rho);
    s << indent << "des_lseg: ";
    Printer<double>::stream(s, indent + "  ", v.des_lseg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CWRU_MSGS_MESSAGE_DESIREDSTATE_H
