# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cwru_action/cwru_baxter_cart_moveResult.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class cwru_baxter_cart_moveResult(genpy.Message):
  _md5sum = "9a149276118a7ea8a4cf40c0176ca433"
  _type = "cwru_action/cwru_baxter_cart_moveResult"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#result definition
#  response codes...
uint8 ARM_STATUS_UNDEFINED=0
uint8 ARM_RECEIVED_AND_INITIATED_RQST=1
uint8 ARM_REQUEST_REJECTED_ALREADY_BUSY=2
uint8 ARM_SERVER_NOT_BUSY=3
uint8 ARM_SERVER_IS_BUSY=4
uint8 ARM_RECEIVED_AND_COMPLETED_RQST=5
uint8 RT_ARM_PATH_IS_VALID=6
uint8 RT_ARM_PATH_NOT_VALID=7

uint8 COMMAND_CODE_NOT_RECOGNIZED=8
uint8 SUCCESS=9
uint8 NOT_FINISHED_BEFORE_TIMEOUT=10
int32 return_code
int32 err_code
string err_msg
float64 computed_arrival_time
float64[] q_arm_right
float64[] q_arm_left
geometry_msgs/PoseStamped current_pose_gripper_right
geometry_msgs/PoseStamped current_pose_gripper_left

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  # Pseudo-constants
  ARM_STATUS_UNDEFINED = 0
  ARM_RECEIVED_AND_INITIATED_RQST = 1
  ARM_REQUEST_REJECTED_ALREADY_BUSY = 2
  ARM_SERVER_NOT_BUSY = 3
  ARM_SERVER_IS_BUSY = 4
  ARM_RECEIVED_AND_COMPLETED_RQST = 5
  RT_ARM_PATH_IS_VALID = 6
  RT_ARM_PATH_NOT_VALID = 7
  COMMAND_CODE_NOT_RECOGNIZED = 8
  SUCCESS = 9
  NOT_FINISHED_BEFORE_TIMEOUT = 10

  __slots__ = ['return_code','err_code','err_msg','computed_arrival_time','q_arm_right','q_arm_left','current_pose_gripper_right','current_pose_gripper_left']
  _slot_types = ['int32','int32','string','float64','float64[]','float64[]','geometry_msgs/PoseStamped','geometry_msgs/PoseStamped']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       return_code,err_code,err_msg,computed_arrival_time,q_arm_right,q_arm_left,current_pose_gripper_right,current_pose_gripper_left

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cwru_baxter_cart_moveResult, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.return_code is None:
        self.return_code = 0
      if self.err_code is None:
        self.err_code = 0
      if self.err_msg is None:
        self.err_msg = ''
      if self.computed_arrival_time is None:
        self.computed_arrival_time = 0.
      if self.q_arm_right is None:
        self.q_arm_right = []
      if self.q_arm_left is None:
        self.q_arm_left = []
      if self.current_pose_gripper_right is None:
        self.current_pose_gripper_right = geometry_msgs.msg.PoseStamped()
      if self.current_pose_gripper_left is None:
        self.current_pose_gripper_left = geometry_msgs.msg.PoseStamped()
    else:
      self.return_code = 0
      self.err_code = 0
      self.err_msg = ''
      self.computed_arrival_time = 0.
      self.q_arm_right = []
      self.q_arm_left = []
      self.current_pose_gripper_right = geometry_msgs.msg.PoseStamped()
      self.current_pose_gripper_left = geometry_msgs.msg.PoseStamped()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2i.pack(_x.return_code, _x.err_code))
      _x = self.err_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.computed_arrival_time))
      length = len(self.q_arm_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.q_arm_right))
      length = len(self.q_arm_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.q_arm_left))
      _x = self
      buff.write(_struct_3I.pack(_x.current_pose_gripper_right.header.seq, _x.current_pose_gripper_right.header.stamp.secs, _x.current_pose_gripper_right.header.stamp.nsecs))
      _x = self.current_pose_gripper_right.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.current_pose_gripper_right.pose.position.x, _x.current_pose_gripper_right.pose.position.y, _x.current_pose_gripper_right.pose.position.z, _x.current_pose_gripper_right.pose.orientation.x, _x.current_pose_gripper_right.pose.orientation.y, _x.current_pose_gripper_right.pose.orientation.z, _x.current_pose_gripper_right.pose.orientation.w, _x.current_pose_gripper_left.header.seq, _x.current_pose_gripper_left.header.stamp.secs, _x.current_pose_gripper_left.header.stamp.nsecs))
      _x = self.current_pose_gripper_left.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.current_pose_gripper_left.pose.position.x, _x.current_pose_gripper_left.pose.position.y, _x.current_pose_gripper_left.pose.position.z, _x.current_pose_gripper_left.pose.orientation.x, _x.current_pose_gripper_left.pose.orientation.y, _x.current_pose_gripper_left.pose.orientation.z, _x.current_pose_gripper_left.pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.current_pose_gripper_right is None:
        self.current_pose_gripper_right = geometry_msgs.msg.PoseStamped()
      if self.current_pose_gripper_left is None:
        self.current_pose_gripper_left = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.return_code, _x.err_code,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.err_msg = str[start:end].decode('utf-8')
      else:
        self.err_msg = str[start:end]
      start = end
      end += 8
      (self.computed_arrival_time,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.q_arm_right = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.q_arm_left = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.current_pose_gripper_right.header.seq, _x.current_pose_gripper_right.header.stamp.secs, _x.current_pose_gripper_right.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_pose_gripper_right.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.current_pose_gripper_right.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.current_pose_gripper_right.pose.position.x, _x.current_pose_gripper_right.pose.position.y, _x.current_pose_gripper_right.pose.position.z, _x.current_pose_gripper_right.pose.orientation.x, _x.current_pose_gripper_right.pose.orientation.y, _x.current_pose_gripper_right.pose.orientation.z, _x.current_pose_gripper_right.pose.orientation.w, _x.current_pose_gripper_left.header.seq, _x.current_pose_gripper_left.header.stamp.secs, _x.current_pose_gripper_left.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_pose_gripper_left.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.current_pose_gripper_left.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.current_pose_gripper_left.pose.position.x, _x.current_pose_gripper_left.pose.position.y, _x.current_pose_gripper_left.pose.position.z, _x.current_pose_gripper_left.pose.orientation.x, _x.current_pose_gripper_left.pose.orientation.y, _x.current_pose_gripper_left.pose.orientation.z, _x.current_pose_gripper_left.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2i.pack(_x.return_code, _x.err_code))
      _x = self.err_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.computed_arrival_time))
      length = len(self.q_arm_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.q_arm_right.tostring())
      length = len(self.q_arm_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.q_arm_left.tostring())
      _x = self
      buff.write(_struct_3I.pack(_x.current_pose_gripper_right.header.seq, _x.current_pose_gripper_right.header.stamp.secs, _x.current_pose_gripper_right.header.stamp.nsecs))
      _x = self.current_pose_gripper_right.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.current_pose_gripper_right.pose.position.x, _x.current_pose_gripper_right.pose.position.y, _x.current_pose_gripper_right.pose.position.z, _x.current_pose_gripper_right.pose.orientation.x, _x.current_pose_gripper_right.pose.orientation.y, _x.current_pose_gripper_right.pose.orientation.z, _x.current_pose_gripper_right.pose.orientation.w, _x.current_pose_gripper_left.header.seq, _x.current_pose_gripper_left.header.stamp.secs, _x.current_pose_gripper_left.header.stamp.nsecs))
      _x = self.current_pose_gripper_left.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.current_pose_gripper_left.pose.position.x, _x.current_pose_gripper_left.pose.position.y, _x.current_pose_gripper_left.pose.position.z, _x.current_pose_gripper_left.pose.orientation.x, _x.current_pose_gripper_left.pose.orientation.y, _x.current_pose_gripper_left.pose.orientation.z, _x.current_pose_gripper_left.pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.current_pose_gripper_right is None:
        self.current_pose_gripper_right = geometry_msgs.msg.PoseStamped()
      if self.current_pose_gripper_left is None:
        self.current_pose_gripper_left = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.return_code, _x.err_code,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.err_msg = str[start:end].decode('utf-8')
      else:
        self.err_msg = str[start:end]
      start = end
      end += 8
      (self.computed_arrival_time,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.q_arm_right = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.q_arm_left = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.current_pose_gripper_right.header.seq, _x.current_pose_gripper_right.header.stamp.secs, _x.current_pose_gripper_right.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_pose_gripper_right.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.current_pose_gripper_right.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.current_pose_gripper_right.pose.position.x, _x.current_pose_gripper_right.pose.position.y, _x.current_pose_gripper_right.pose.position.z, _x.current_pose_gripper_right.pose.orientation.x, _x.current_pose_gripper_right.pose.orientation.y, _x.current_pose_gripper_right.pose.orientation.z, _x.current_pose_gripper_right.pose.orientation.w, _x.current_pose_gripper_left.header.seq, _x.current_pose_gripper_left.header.stamp.secs, _x.current_pose_gripper_left.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_pose_gripper_left.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.current_pose_gripper_left.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.current_pose_gripper_left.pose.position.x, _x.current_pose_gripper_left.pose.position.y, _x.current_pose_gripper_left.pose.position.z, _x.current_pose_gripper_left.pose.orientation.x, _x.current_pose_gripper_left.pose.orientation.y, _x.current_pose_gripper_left.pose.orientation.z, _x.current_pose_gripper_left.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7d3I = struct.Struct("<7d3I")
_struct_3I = struct.Struct("<3I")
_struct_7d = struct.Struct("<7d")
_struct_2i = struct.Struct("<2i")
_struct_d = struct.Struct("<d")
