# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cwru_action/cwru_baxter_cart_moveAction.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import genpy
import actionlib_msgs.msg
import cwru_action.msg
import std_msgs.msg

class cwru_baxter_cart_moveAction(genpy.Message):
  _md5sum = "f01bf277fd3e7827ce5408cf28657d5a"
  _type = "cwru_action/cwru_baxter_cart_moveAction"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

cwru_baxter_cart_moveActionGoal action_goal
cwru_baxter_cart_moveActionResult action_result
cwru_baxter_cart_moveActionFeedback action_feedback

================================================================================
MSG: cwru_action/cwru_baxter_cart_moveActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
cwru_baxter_cart_moveGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: cwru_action/cwru_baxter_cart_moveGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#This action message is specialized for Baxter
#minimally, it may contain just a command code
#more generally, it may contain desired left and right tool-frame poses, as well
# as gripper poses (gripper opening--interpreted for specific grippers, e.g. Yale hand)
# and an arrival time for the move
# It is assumed that a move starts from the previous commanded pose, or from the current joint state

#return codes provide status info, e.g. if a proposed move is reachable

#define message constants:
uint8 ARM_TEST_MODE =0

#queries
uint8 ARM_IS_SERVER_BUSY_QUERY = 1

uint8 ARM_QUERY_IS_PATH_VALID = 2
uint8 RT_ARM_GET_Q_DATA = 3
uint8 LEFT_ARM_GET_Q_DATA = 4
uint8 RT_ARM_GET_TOOL_POSE = 5
uint8 LEFT_ARM_GET_TOOL_POSE = 5

#requests for motion plans; need to extend this to left arm and both arms
uint8 RT_ARM_PLAN_PATH_CURRENT_TO_GOAL_POSE=20 #plan paths from current arm pose
uint8 RT_ARM_PLAN_PATH_CURRENT_TO_PRE_POSE=21

uint8 RT_ARM_PLAN_JSPACE_PATH_CURRENT_TO_PRE_POSE=22
uint8 RT_ARM_PLAN_JSPACE_PATH_CURRENT_TO_QGOAL=23

#cartesian path from specified joint-space start and end;
# orientation interpolation is a bit odd
uint8 RT_ARM_PLAN_PATH_QSTART_TO_QGOAL = 25
uint8 RT_ARM_PLAN_PATH_QSTART_TO_ADES = 24 #specify start and end, j-space start, affine desired end

#uint8 RT_ARM_PLAN_PATH_ASTART_TO_QGOAL = 26 #specified affine start, joint-space goal
uint8 RT_ARM_PLAN_PATH_CURRENT_TO_GOAL_DP_XYZ = 27 #rectilinear translation w/ fixed orientation

# request to preview plan:
uint8 RT_ARM_DISPLAY_TRAJECTORY = 50

#MOVE commands!
uint8 RT_ARM_EXECUTE_PLANNED_PATH = 100

#uint8 RT_ARM_DESCEND_20CM=101
#uint8 RT_ARM_DEPART_20CM=102


#goal:
int32 command_code
geometry_msgs/PoseStamped des_pose_gripper_right
geometry_msgs/PoseStamped des_pose_gripper_left
float64 gripper_opening_right
float64 gripper_opening_left
float64[] arm_dp_right #to command a 3-D vector displacement relative to current pose, fixed orientation
float64[] arm_dp_left
float64[] q_goal_right
float64[] q_goal_left
float64 move_time

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: cwru_action/cwru_baxter_cart_moveActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
cwru_baxter_cart_moveResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: cwru_action/cwru_baxter_cart_moveResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#result definition
#  response codes...
uint8 ARM_STATUS_UNDEFINED=0
uint8 ARM_RECEIVED_AND_INITIATED_RQST=1
uint8 ARM_REQUEST_REJECTED_ALREADY_BUSY=2
uint8 ARM_SERVER_NOT_BUSY=3
uint8 ARM_SERVER_IS_BUSY=4
uint8 ARM_RECEIVED_AND_COMPLETED_RQST=5
uint8 RT_ARM_PATH_IS_VALID=6
uint8 RT_ARM_PATH_NOT_VALID=7

uint8 COMMAND_CODE_NOT_RECOGNIZED=8
uint8 SUCCESS=9
uint8 NOT_FINISHED_BEFORE_TIMEOUT=10
int32 return_code
int32 err_code
string err_msg
float64 computed_arrival_time
float64[] q_arm_right
float64[] q_arm_left
geometry_msgs/PoseStamped current_pose_gripper_right
geometry_msgs/PoseStamped current_pose_gripper_left

================================================================================
MSG: cwru_action/cwru_baxter_cart_moveActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
cwru_baxter_cart_moveFeedback feedback

================================================================================
MSG: cwru_action/cwru_baxter_cart_moveFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback: optional; 
int32 fdbk

"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['cwru_action/cwru_baxter_cart_moveActionGoal','cwru_action/cwru_baxter_cart_moveActionResult','cwru_action/cwru_baxter_cart_moveActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cwru_baxter_cart_moveAction, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = cwru_action.msg.cwru_baxter_cart_moveActionGoal()
      if self.action_result is None:
        self.action_result = cwru_action.msg.cwru_baxter_cart_moveActionResult()
      if self.action_feedback is None:
        self.action_feedback = cwru_action.msg.cwru_baxter_cart_moveActionFeedback()
    else:
      self.action_goal = cwru_action.msg.cwru_baxter_cart_moveActionGoal()
      self.action_result = cwru_action.msg.cwru_baxter_cart_moveActionResult()
      self.action_feedback = cwru_action.msg.cwru_baxter_cart_moveActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i3I.pack(_x.action_goal.goal.command_code, _x.action_goal.goal.des_pose_gripper_right.header.seq, _x.action_goal.goal.des_pose_gripper_right.header.stamp.secs, _x.action_goal.goal.des_pose_gripper_right.header.stamp.nsecs))
      _x = self.action_goal.goal.des_pose_gripper_right.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.des_pose_gripper_right.pose.position.x, _x.action_goal.goal.des_pose_gripper_right.pose.position.y, _x.action_goal.goal.des_pose_gripper_right.pose.position.z, _x.action_goal.goal.des_pose_gripper_right.pose.orientation.x, _x.action_goal.goal.des_pose_gripper_right.pose.orientation.y, _x.action_goal.goal.des_pose_gripper_right.pose.orientation.z, _x.action_goal.goal.des_pose_gripper_right.pose.orientation.w, _x.action_goal.goal.des_pose_gripper_left.header.seq, _x.action_goal.goal.des_pose_gripper_left.header.stamp.secs, _x.action_goal.goal.des_pose_gripper_left.header.stamp.nsecs))
      _x = self.action_goal.goal.des_pose_gripper_left.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_9d.pack(_x.action_goal.goal.des_pose_gripper_left.pose.position.x, _x.action_goal.goal.des_pose_gripper_left.pose.position.y, _x.action_goal.goal.des_pose_gripper_left.pose.position.z, _x.action_goal.goal.des_pose_gripper_left.pose.orientation.x, _x.action_goal.goal.des_pose_gripper_left.pose.orientation.y, _x.action_goal.goal.des_pose_gripper_left.pose.orientation.z, _x.action_goal.goal.des_pose_gripper_left.pose.orientation.w, _x.action_goal.goal.gripper_opening_right, _x.action_goal.goal.gripper_opening_left))
      length = len(self.action_goal.goal.arm_dp_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_goal.goal.arm_dp_right))
      length = len(self.action_goal.goal.arm_dp_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_goal.goal.arm_dp_left))
      length = len(self.action_goal.goal.q_goal_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_goal.goal.q_goal_right))
      length = len(self.action_goal.goal.q_goal_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_goal.goal.q_goal_left))
      _x = self
      buff.write(_struct_d3I.pack(_x.action_goal.goal.move_time, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2i.pack(_x.action_result.result.return_code, _x.action_result.result.err_code))
      _x = self.action_result.result.err_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.action_result.result.computed_arrival_time))
      length = len(self.action_result.result.q_arm_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_result.result.q_arm_right))
      length = len(self.action_result.result.q_arm_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_result.result.q_arm_left))
      _x = self
      buff.write(_struct_3I.pack(_x.action_result.result.current_pose_gripper_right.header.seq, _x.action_result.result.current_pose_gripper_right.header.stamp.secs, _x.action_result.result.current_pose_gripper_right.header.stamp.nsecs))
      _x = self.action_result.result.current_pose_gripper_right.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_result.result.current_pose_gripper_right.pose.position.x, _x.action_result.result.current_pose_gripper_right.pose.position.y, _x.action_result.result.current_pose_gripper_right.pose.position.z, _x.action_result.result.current_pose_gripper_right.pose.orientation.x, _x.action_result.result.current_pose_gripper_right.pose.orientation.y, _x.action_result.result.current_pose_gripper_right.pose.orientation.z, _x.action_result.result.current_pose_gripper_right.pose.orientation.w, _x.action_result.result.current_pose_gripper_left.header.seq, _x.action_result.result.current_pose_gripper_left.header.stamp.secs, _x.action_result.result.current_pose_gripper_left.header.stamp.nsecs))
      _x = self.action_result.result.current_pose_gripper_left.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_result.result.current_pose_gripper_left.pose.position.x, _x.action_result.result.current_pose_gripper_left.pose.position.y, _x.action_result.result.current_pose_gripper_left.pose.position.z, _x.action_result.result.current_pose_gripper_left.pose.orientation.x, _x.action_result.result.current_pose_gripper_left.pose.orientation.y, _x.action_result.result.current_pose_gripper_left.pose.orientation.z, _x.action_result.result.current_pose_gripper_left.pose.orientation.w, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.action_feedback.feedback.fdbk))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.action_goal is None:
        self.action_goal = cwru_action.msg.cwru_baxter_cart_moveActionGoal()
      if self.action_result is None:
        self.action_result = cwru_action.msg.cwru_baxter_cart_moveActionResult()
      if self.action_feedback is None:
        self.action_feedback = cwru_action.msg.cwru_baxter_cart_moveActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.action_goal.goal.command_code, _x.action_goal.goal.des_pose_gripper_right.header.seq, _x.action_goal.goal.des_pose_gripper_right.header.stamp.secs, _x.action_goal.goal.des_pose_gripper_right.header.stamp.nsecs,) = _struct_i3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.des_pose_gripper_right.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.des_pose_gripper_right.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.des_pose_gripper_right.pose.position.x, _x.action_goal.goal.des_pose_gripper_right.pose.position.y, _x.action_goal.goal.des_pose_gripper_right.pose.position.z, _x.action_goal.goal.des_pose_gripper_right.pose.orientation.x, _x.action_goal.goal.des_pose_gripper_right.pose.orientation.y, _x.action_goal.goal.des_pose_gripper_right.pose.orientation.z, _x.action_goal.goal.des_pose_gripper_right.pose.orientation.w, _x.action_goal.goal.des_pose_gripper_left.header.seq, _x.action_goal.goal.des_pose_gripper_left.header.stamp.secs, _x.action_goal.goal.des_pose_gripper_left.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.des_pose_gripper_left.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.des_pose_gripper_left.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.action_goal.goal.des_pose_gripper_left.pose.position.x, _x.action_goal.goal.des_pose_gripper_left.pose.position.y, _x.action_goal.goal.des_pose_gripper_left.pose.position.z, _x.action_goal.goal.des_pose_gripper_left.pose.orientation.x, _x.action_goal.goal.des_pose_gripper_left.pose.orientation.y, _x.action_goal.goal.des_pose_gripper_left.pose.orientation.z, _x.action_goal.goal.des_pose_gripper_left.pose.orientation.w, _x.action_goal.goal.gripper_opening_right, _x.action_goal.goal.gripper_opening_left,) = _struct_9d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.arm_dp_right = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.arm_dp_left = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.q_goal_right = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.q_goal_left = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 20
      (_x.action_goal.goal.move_time, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _struct_d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.result.return_code, _x.action_result.result.err_code,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.err_msg = str[start:end].decode('utf-8')
      else:
        self.action_result.result.err_msg = str[start:end]
      start = end
      end += 8
      (self.action_result.result.computed_arrival_time,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.q_arm_right = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.q_arm_left = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.action_result.result.current_pose_gripper_right.header.seq, _x.action_result.result.current_pose_gripper_right.header.stamp.secs, _x.action_result.result.current_pose_gripper_right.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.current_pose_gripper_right.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.current_pose_gripper_right.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_result.result.current_pose_gripper_right.pose.position.x, _x.action_result.result.current_pose_gripper_right.pose.position.y, _x.action_result.result.current_pose_gripper_right.pose.position.z, _x.action_result.result.current_pose_gripper_right.pose.orientation.x, _x.action_result.result.current_pose_gripper_right.pose.orientation.y, _x.action_result.result.current_pose_gripper_right.pose.orientation.z, _x.action_result.result.current_pose_gripper_right.pose.orientation.w, _x.action_result.result.current_pose_gripper_left.header.seq, _x.action_result.result.current_pose_gripper_left.header.stamp.secs, _x.action_result.result.current_pose_gripper_left.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.current_pose_gripper_left.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.current_pose_gripper_left.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_result.result.current_pose_gripper_left.pose.position.x, _x.action_result.result.current_pose_gripper_left.pose.position.y, _x.action_result.result.current_pose_gripper_left.pose.position.z, _x.action_result.result.current_pose_gripper_left.pose.orientation.x, _x.action_result.result.current_pose_gripper_left.pose.orientation.y, _x.action_result.result.current_pose_gripper_left.pose.orientation.z, _x.action_result.result.current_pose_gripper_left.pose.orientation.w, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (self.action_feedback.feedback.fdbk,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i3I.pack(_x.action_goal.goal.command_code, _x.action_goal.goal.des_pose_gripper_right.header.seq, _x.action_goal.goal.des_pose_gripper_right.header.stamp.secs, _x.action_goal.goal.des_pose_gripper_right.header.stamp.nsecs))
      _x = self.action_goal.goal.des_pose_gripper_right.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.des_pose_gripper_right.pose.position.x, _x.action_goal.goal.des_pose_gripper_right.pose.position.y, _x.action_goal.goal.des_pose_gripper_right.pose.position.z, _x.action_goal.goal.des_pose_gripper_right.pose.orientation.x, _x.action_goal.goal.des_pose_gripper_right.pose.orientation.y, _x.action_goal.goal.des_pose_gripper_right.pose.orientation.z, _x.action_goal.goal.des_pose_gripper_right.pose.orientation.w, _x.action_goal.goal.des_pose_gripper_left.header.seq, _x.action_goal.goal.des_pose_gripper_left.header.stamp.secs, _x.action_goal.goal.des_pose_gripper_left.header.stamp.nsecs))
      _x = self.action_goal.goal.des_pose_gripper_left.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_9d.pack(_x.action_goal.goal.des_pose_gripper_left.pose.position.x, _x.action_goal.goal.des_pose_gripper_left.pose.position.y, _x.action_goal.goal.des_pose_gripper_left.pose.position.z, _x.action_goal.goal.des_pose_gripper_left.pose.orientation.x, _x.action_goal.goal.des_pose_gripper_left.pose.orientation.y, _x.action_goal.goal.des_pose_gripper_left.pose.orientation.z, _x.action_goal.goal.des_pose_gripper_left.pose.orientation.w, _x.action_goal.goal.gripper_opening_right, _x.action_goal.goal.gripper_opening_left))
      length = len(self.action_goal.goal.arm_dp_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.arm_dp_right.tostring())
      length = len(self.action_goal.goal.arm_dp_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.arm_dp_left.tostring())
      length = len(self.action_goal.goal.q_goal_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.q_goal_right.tostring())
      length = len(self.action_goal.goal.q_goal_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.q_goal_left.tostring())
      _x = self
      buff.write(_struct_d3I.pack(_x.action_goal.goal.move_time, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2i.pack(_x.action_result.result.return_code, _x.action_result.result.err_code))
      _x = self.action_result.result.err_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.action_result.result.computed_arrival_time))
      length = len(self.action_result.result.q_arm_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_result.result.q_arm_right.tostring())
      length = len(self.action_result.result.q_arm_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_result.result.q_arm_left.tostring())
      _x = self
      buff.write(_struct_3I.pack(_x.action_result.result.current_pose_gripper_right.header.seq, _x.action_result.result.current_pose_gripper_right.header.stamp.secs, _x.action_result.result.current_pose_gripper_right.header.stamp.nsecs))
      _x = self.action_result.result.current_pose_gripper_right.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_result.result.current_pose_gripper_right.pose.position.x, _x.action_result.result.current_pose_gripper_right.pose.position.y, _x.action_result.result.current_pose_gripper_right.pose.position.z, _x.action_result.result.current_pose_gripper_right.pose.orientation.x, _x.action_result.result.current_pose_gripper_right.pose.orientation.y, _x.action_result.result.current_pose_gripper_right.pose.orientation.z, _x.action_result.result.current_pose_gripper_right.pose.orientation.w, _x.action_result.result.current_pose_gripper_left.header.seq, _x.action_result.result.current_pose_gripper_left.header.stamp.secs, _x.action_result.result.current_pose_gripper_left.header.stamp.nsecs))
      _x = self.action_result.result.current_pose_gripper_left.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_result.result.current_pose_gripper_left.pose.position.x, _x.action_result.result.current_pose_gripper_left.pose.position.y, _x.action_result.result.current_pose_gripper_left.pose.position.z, _x.action_result.result.current_pose_gripper_left.pose.orientation.x, _x.action_result.result.current_pose_gripper_left.pose.orientation.y, _x.action_result.result.current_pose_gripper_left.pose.orientation.z, _x.action_result.result.current_pose_gripper_left.pose.orientation.w, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.action_feedback.feedback.fdbk))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.action_goal is None:
        self.action_goal = cwru_action.msg.cwru_baxter_cart_moveActionGoal()
      if self.action_result is None:
        self.action_result = cwru_action.msg.cwru_baxter_cart_moveActionResult()
      if self.action_feedback is None:
        self.action_feedback = cwru_action.msg.cwru_baxter_cart_moveActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.action_goal.goal.command_code, _x.action_goal.goal.des_pose_gripper_right.header.seq, _x.action_goal.goal.des_pose_gripper_right.header.stamp.secs, _x.action_goal.goal.des_pose_gripper_right.header.stamp.nsecs,) = _struct_i3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.des_pose_gripper_right.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.des_pose_gripper_right.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.des_pose_gripper_right.pose.position.x, _x.action_goal.goal.des_pose_gripper_right.pose.position.y, _x.action_goal.goal.des_pose_gripper_right.pose.position.z, _x.action_goal.goal.des_pose_gripper_right.pose.orientation.x, _x.action_goal.goal.des_pose_gripper_right.pose.orientation.y, _x.action_goal.goal.des_pose_gripper_right.pose.orientation.z, _x.action_goal.goal.des_pose_gripper_right.pose.orientation.w, _x.action_goal.goal.des_pose_gripper_left.header.seq, _x.action_goal.goal.des_pose_gripper_left.header.stamp.secs, _x.action_goal.goal.des_pose_gripper_left.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.des_pose_gripper_left.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.des_pose_gripper_left.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.action_goal.goal.des_pose_gripper_left.pose.position.x, _x.action_goal.goal.des_pose_gripper_left.pose.position.y, _x.action_goal.goal.des_pose_gripper_left.pose.position.z, _x.action_goal.goal.des_pose_gripper_left.pose.orientation.x, _x.action_goal.goal.des_pose_gripper_left.pose.orientation.y, _x.action_goal.goal.des_pose_gripper_left.pose.orientation.z, _x.action_goal.goal.des_pose_gripper_left.pose.orientation.w, _x.action_goal.goal.gripper_opening_right, _x.action_goal.goal.gripper_opening_left,) = _struct_9d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.arm_dp_right = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.arm_dp_left = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.q_goal_right = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.q_goal_left = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 20
      (_x.action_goal.goal.move_time, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _struct_d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.result.return_code, _x.action_result.result.err_code,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.err_msg = str[start:end].decode('utf-8')
      else:
        self.action_result.result.err_msg = str[start:end]
      start = end
      end += 8
      (self.action_result.result.computed_arrival_time,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.q_arm_right = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.q_arm_left = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.action_result.result.current_pose_gripper_right.header.seq, _x.action_result.result.current_pose_gripper_right.header.stamp.secs, _x.action_result.result.current_pose_gripper_right.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.current_pose_gripper_right.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.current_pose_gripper_right.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_result.result.current_pose_gripper_right.pose.position.x, _x.action_result.result.current_pose_gripper_right.pose.position.y, _x.action_result.result.current_pose_gripper_right.pose.position.z, _x.action_result.result.current_pose_gripper_right.pose.orientation.x, _x.action_result.result.current_pose_gripper_right.pose.orientation.y, _x.action_result.result.current_pose_gripper_right.pose.orientation.z, _x.action_result.result.current_pose_gripper_right.pose.orientation.w, _x.action_result.result.current_pose_gripper_left.header.seq, _x.action_result.result.current_pose_gripper_left.header.stamp.secs, _x.action_result.result.current_pose_gripper_left.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.current_pose_gripper_left.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.current_pose_gripper_left.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_result.result.current_pose_gripper_left.pose.position.x, _x.action_result.result.current_pose_gripper_left.pose.position.y, _x.action_result.result.current_pose_gripper_left.pose.position.z, _x.action_result.result.current_pose_gripper_left.pose.orientation.x, _x.action_result.result.current_pose_gripper_left.pose.orientation.y, _x.action_result.result.current_pose_gripper_left.pose.orientation.z, _x.action_result.result.current_pose_gripper_left.pose.orientation.w, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (self.action_feedback.feedback.fdbk,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_d = struct.Struct("<d")
_struct_i = struct.Struct("<i")
_struct_9d = struct.Struct("<9d")
_struct_2I = struct.Struct("<2I")
_struct_3I = struct.Struct("<3I")
_struct_d3I = struct.Struct("<d3I")
_struct_i3I = struct.Struct("<i3I")
_struct_7d3I = struct.Struct("<7d3I")
_struct_2i = struct.Struct("<2i")
