# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cwru_msgs/PathSegment.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class PathSegment(genpy.Message):
  _md5sum = "5c807f5cea06f40555a1d9f2a31b3c69"
  _type = "cwru_msgs/PathSegment"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """#Reference frame that the following coordinates should be interpreted relative to and timestamp to use when transforming
Header header

#Segment type enums
int8 LINE = 1
int8 ARC = 2
int8 SPIN_IN_PLACE = 3

#Segment type
int8 seg_type

#Segment number
uint32 seg_number

#Segment length
float64 seg_length

#Reference point
geometry_msgs/Point ref_point

#Initial tangent angle
geometry_msgs/Quaternion init_tan_angle

#Curvature
float64 curvature

#Speed limits for this segment
geometry_msgs/Twist max_speeds
geometry_msgs/Twist min_speeds

#Acceleration limit for this segment (m/s^2 for lines/arcs, rads/s^2 for spin-in-place)
float64 accel_limit

#Deceleration limit for this segment
float64 decel_limit

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  # Pseudo-constants
  LINE = 1
  ARC = 2
  SPIN_IN_PLACE = 3

  __slots__ = ['header','seg_type','seg_number','seg_length','ref_point','init_tan_angle','curvature','max_speeds','min_speeds','accel_limit','decel_limit']
  _slot_types = ['std_msgs/Header','int8','uint32','float64','geometry_msgs/Point','geometry_msgs/Quaternion','float64','geometry_msgs/Twist','geometry_msgs/Twist','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,seg_type,seg_number,seg_length,ref_point,init_tan_angle,curvature,max_speeds,min_speeds,accel_limit,decel_limit

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PathSegment, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.seg_type is None:
        self.seg_type = 0
      if self.seg_number is None:
        self.seg_number = 0
      if self.seg_length is None:
        self.seg_length = 0.
      if self.ref_point is None:
        self.ref_point = geometry_msgs.msg.Point()
      if self.init_tan_angle is None:
        self.init_tan_angle = geometry_msgs.msg.Quaternion()
      if self.curvature is None:
        self.curvature = 0.
      if self.max_speeds is None:
        self.max_speeds = geometry_msgs.msg.Twist()
      if self.min_speeds is None:
        self.min_speeds = geometry_msgs.msg.Twist()
      if self.accel_limit is None:
        self.accel_limit = 0.
      if self.decel_limit is None:
        self.decel_limit = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.seg_type = 0
      self.seg_number = 0
      self.seg_length = 0.
      self.ref_point = geometry_msgs.msg.Point()
      self.init_tan_angle = geometry_msgs.msg.Quaternion()
      self.curvature = 0.
      self.max_speeds = geometry_msgs.msg.Twist()
      self.min_speeds = geometry_msgs.msg.Twist()
      self.accel_limit = 0.
      self.decel_limit = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_bI23d.pack(_x.seg_type, _x.seg_number, _x.seg_length, _x.ref_point.x, _x.ref_point.y, _x.ref_point.z, _x.init_tan_angle.x, _x.init_tan_angle.y, _x.init_tan_angle.z, _x.init_tan_angle.w, _x.curvature, _x.max_speeds.linear.x, _x.max_speeds.linear.y, _x.max_speeds.linear.z, _x.max_speeds.angular.x, _x.max_speeds.angular.y, _x.max_speeds.angular.z, _x.min_speeds.linear.x, _x.min_speeds.linear.y, _x.min_speeds.linear.z, _x.min_speeds.angular.x, _x.min_speeds.angular.y, _x.min_speeds.angular.z, _x.accel_limit, _x.decel_limit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ref_point is None:
        self.ref_point = geometry_msgs.msg.Point()
      if self.init_tan_angle is None:
        self.init_tan_angle = geometry_msgs.msg.Quaternion()
      if self.max_speeds is None:
        self.max_speeds = geometry_msgs.msg.Twist()
      if self.min_speeds is None:
        self.min_speeds = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 189
      (_x.seg_type, _x.seg_number, _x.seg_length, _x.ref_point.x, _x.ref_point.y, _x.ref_point.z, _x.init_tan_angle.x, _x.init_tan_angle.y, _x.init_tan_angle.z, _x.init_tan_angle.w, _x.curvature, _x.max_speeds.linear.x, _x.max_speeds.linear.y, _x.max_speeds.linear.z, _x.max_speeds.angular.x, _x.max_speeds.angular.y, _x.max_speeds.angular.z, _x.min_speeds.linear.x, _x.min_speeds.linear.y, _x.min_speeds.linear.z, _x.min_speeds.angular.x, _x.min_speeds.angular.y, _x.min_speeds.angular.z, _x.accel_limit, _x.decel_limit,) = _struct_bI23d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_bI23d.pack(_x.seg_type, _x.seg_number, _x.seg_length, _x.ref_point.x, _x.ref_point.y, _x.ref_point.z, _x.init_tan_angle.x, _x.init_tan_angle.y, _x.init_tan_angle.z, _x.init_tan_angle.w, _x.curvature, _x.max_speeds.linear.x, _x.max_speeds.linear.y, _x.max_speeds.linear.z, _x.max_speeds.angular.x, _x.max_speeds.angular.y, _x.max_speeds.angular.z, _x.min_speeds.linear.x, _x.min_speeds.linear.y, _x.min_speeds.linear.z, _x.min_speeds.angular.x, _x.min_speeds.angular.y, _x.min_speeds.angular.z, _x.accel_limit, _x.decel_limit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ref_point is None:
        self.ref_point = geometry_msgs.msg.Point()
      if self.init_tan_angle is None:
        self.init_tan_angle = geometry_msgs.msg.Quaternion()
      if self.max_speeds is None:
        self.max_speeds = geometry_msgs.msg.Twist()
      if self.min_speeds is None:
        self.min_speeds = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 189
      (_x.seg_type, _x.seg_number, _x.seg_length, _x.ref_point.x, _x.ref_point.y, _x.ref_point.z, _x.init_tan_angle.x, _x.init_tan_angle.y, _x.init_tan_angle.z, _x.init_tan_angle.w, _x.curvature, _x.max_speeds.linear.x, _x.max_speeds.linear.y, _x.max_speeds.linear.z, _x.max_speeds.angular.x, _x.max_speeds.angular.y, _x.max_speeds.angular.z, _x.min_speeds.linear.x, _x.min_speeds.linear.y, _x.min_speeds.linear.z, _x.min_speeds.angular.x, _x.min_speeds.angular.y, _x.min_speeds.angular.z, _x.accel_limit, _x.decel_limit,) = _struct_bI23d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_bI23d = struct.Struct("<bI23d")
