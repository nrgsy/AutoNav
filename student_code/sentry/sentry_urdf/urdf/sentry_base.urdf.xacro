<?xml version="1.0"?>

<robot
  xmlns:xacro="http://www.ros.org/wiki/xacro"
  xmlns:interface="http://playerstage.sourceforge.net/gazebo/xmlschema/#interface">
      
  <xacro:property name="wheel_size_y" value="${bodywidth/2}" />
  <xacro:property name="wheel_radius" value="0.085" />

  <xacro:property name="wheel_offset_y" value="${bodywidth/2 + wheel_size_y/2}" />

  <xacro:property name="wheel_offset_z_from_base_link" value="${-bodyheight/2}" />   

  <xacro:property name="wheel_spacing" value="0.1055" /> 

  <!-- define the base-link origin to lie at floor level, between the drive wheels-->
   <!--main body is a simple box; origin is a center of box-->
  <xacro:property name="bodylen" value="1.0" />
  <xacro:property name="bodywidth" value="0.5" />
  <xacro:property name="bodyheight" value="1.2" />
  <xacro:property name="default_mass" value="1.0" />
  <xacro:property name="lidar_cube_size" value="0.25" />
  <xacro:property name="lidar_dist_up_body" value="0.2" />
  
  <!-- "track" is the distance between the wheels -->
  <xacro:property name="track" value=".52" />
  <xacro:property name="M_PI" value="3.1415926535897931" />
    
  <xacro:macro name="tracked_wheel" params="parent prefix offset_x offset_y offset_z">
    
    <joint name="${prefix}_wheel_joint" type="continuous">
      <origin xyz="${offset_x } ${offset_y} ${offset_z}" rpy="0 0 0" />
      <parent link="${parent}" />
      <child link="${prefix}_wheel_link" />
      <axis xyz="0 1 0" />
      <limit effort="100" velocity="100" />
      <joint_properties damping="0.0" friction="0.0" />
      <anchor xyz="0 0 0" />
    </joint>    
    
    <link name="${prefix}_wheel_link">
      <inertial>
        <mass value="0.01" />
        <origin xyz=" 0 0 0 " />
        <inertia  ixx="0.00012411765597" ixy="0.0" ixz="0.0"
                 iyy="0.00015218160428" iyz="0.0"
                 izz="0.00011763977943" />
      </inertial>
        
      <collision>
        <origin xyz="0 0 0" rpy="${-M_PI/2} 0 0" />
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_size_y}" />
        </geometry>
      </collision>
      <visual>
        <origin xyz="0 0 0" rpy="${-M_PI/2} 0 0" />
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_size_y}" />
        </geometry>
      </visual>
    </link>
      
    <gazebo reference="${prefix}_wheel_link" >
      <mu1>1.0</mu1>
      <mu2>1.0</mu2>
      <kp>1000000.0</kp>
      <kd>100.0</kd>
      <minDepth>0.001</minDepth>
    </gazebo>
    
    <transmission type="pr2_mechanism_model/SimpleTransmission" name="${prefix}_wheel_trans">
      <actuator name="${prefix}_motor_link" />
      <joint name="${prefix}_wheel_joint" />
      <mechanicalReduction>1.0</mechanicalReduction>
      <motorTorqueConstant>1</motorTorqueConstant>
    </transmission>
  </xacro:macro>

  <xacro:macro name="sentry_macro">    

    <link name="base_link">
      <visual>
          <geometry>
              <box size="${bodylen} ${bodywidth} ${bodyheight}"/>
          </geometry>
          <origin xyz="0 0 0" rpy="0 0 0"/>
      </visual>
      <collision>
          <geometry>
              <box size="${bodylen} ${bodywidth} ${bodyheight}"/>
          </geometry>
          <origin xyz="0 0 0" rpy="0 0 0"/>
      </collision>
      <inertial>
          <mass value="${10*default_mass}" />
          <inertia ixx="10" ixy="0" ixz="0"
            iyy="10" iyz="0"
            izz="10" />
      </inertial>
    </link>

    <link name="lidar_link">
      <collision>
        <geometry>
          <box size="${lidar_cube_size} ${lidar_cube_size} ${lidar_cube_size}"/>
        </geometry>
      </collision>
      <visual>
        <geometry>
          <box size="${lidar_cube_size} ${lidar_cube_size} ${lidar_cube_size}" />
        </geometry>
        <material name="sick_grey">
          <color rgba="0.7 0.5 0.3 1.0"/>
        </material>
      </visual>
      <inertial>
          <mass value="${0.1*default_mass}" />
          <inertia ixx="0.01" ixy="0" ixz="0" iyy="0.01" iyz="0" izz="0.01" />
      </inertial>
    </link>

    <joint name="lidar_joint" type="fixed">
        <axis xyz="0 1 0" />
        <origin xyz="${bodylen/2 + lidar_cube_size/2} 0 ${lidar_dist_up_body - bodylen/2}" rpy="0 0 0"/>
        <parent link="base_link"/>
        <child link="lidar_link"/>
    </joint>

    <!-- here is the gazebo plug-in to simulate a lidar sensor -->
    <gazebo reference="lidar_link">
      <sensor type="gpu_ray" name="sick_lidar_sensor">
        <pose>0 0 0 0 0 0</pose>
        <visualize>true</visualize>
        <update_rate>40</update_rate>
        <ray>
          <scan>
            <horizontal>
              <samples>181</samples>
              <resolution>1</resolution>
              <min_angle>-1.570796</min_angle>
              <max_angle>1.570796</max_angle>
            </horizontal>
          </scan>
          <range>
            <min>0.10</min>
            <max>80.0</max>
            <resolution>0.01</resolution>
          </range>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.01</stddev>
          </noise>
        </ray>
        <plugin name="gazebo_ros_lidar_controller" filename="libgazebo_ros_gpu_laser.so">
          <topicName>/sensor_msgs/LaserScan</topicName>
          <frameName>lidar_link</frameName>
        </plugin>
      </sensor>
    </gazebo>  
        
    <xacro:tracked_wheel parent="base_link" prefix="left_0" offset_x= "${2*wheel_spacing}" offset_y = "${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/>
    <xacro:tracked_wheel parent="base_link" prefix="left_1" offset_x= "0.0" offset_y = "${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/>
    <xacro:tracked_wheel parent="base_link" prefix="left_2" offset_x= "${-2*wheel_spacing}" offset_y = "${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/>
    <xacro:tracked_wheel parent="base_link" prefix="left_3" offset_x= "${wheel_spacing}" offset_y = "${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/>
    <xacro:tracked_wheel parent="base_link" prefix="left_4" offset_x= "${-wheel_spacing}" offset_y = "${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/>

    <!-- additional left wheels -->
    <!-- <xacro:tracked_wheel parent="base_link" prefix="left_5" offset_x= "${-3*wheel_spacing}" offset_y = "${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/>
    <xacro:tracked_wheel parent="base_link" prefix="left_6" offset_x= "${3*wheel_spacing}" offset_y = "${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/>
    <xacro:tracked_wheel parent="base_link" prefix="left_7" offset_x= "${-4*wheel_spacing}" offset_y = "${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/>
    <xacro:tracked_wheel parent="base_link" prefix="left_8" offset_x= "${4*wheel_spacing}" offset_y = "${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/>
    <xacro:tracked_wheel parent="base_link" prefix="left_9" offset_x= "${-5*wheel_spacing}" offset_y = "${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/>
    <xacro:tracked_wheel parent="base_link" prefix="left_10" offset_x= "${5*wheel_spacing}" offset_y = "${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/> -->





    <xacro:tracked_wheel parent="base_link" prefix="right_0" offset_x= "${2*wheel_spacing}" offset_y = "-${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/>
    <xacro:tracked_wheel parent="base_link" prefix="right_1" offset_x= "0.0" offset_y = "-${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/>
    <xacro:tracked_wheel parent="base_link" prefix="right_2" offset_x= "${-2*wheel_spacing}" offset_y = "-${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/>
    <xacro:tracked_wheel parent="base_link" prefix="right_3" offset_x= "${-wheel_spacing}" offset_y = "-${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/>
    <xacro:tracked_wheel parent="base_link" prefix="right_4" offset_x= "${wheel_spacing}" offset_y = "-${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/>
    
    <!-- additional right wheels -->
    <!-- <xacro:tracked_wheel parent="base_link" prefix="right_5" offset_x= "${-3*wheel_spacing}" offset_y = "-${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/>
    <xacro:tracked_wheel parent="base_link" prefix="right_6" offset_x= "${3*wheel_spacing}" offset_y = "-${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/>
    <xacro:tracked_wheel parent="base_link" prefix="right_7" offset_x= "${-4*wheel_spacing}" offset_y = "-${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/>
    <xacro:tracked_wheel parent="base_link" prefix="right_8" offset_x= "${4*wheel_spacing}" offset_y = "-${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/>
    <xacro:tracked_wheel parent="base_link" prefix="right_9" offset_x= "${-5*wheel_spacing}" offset_y = "-${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/>
    <xacro:tracked_wheel parent="base_link" prefix="right_10" offset_x= "${5*wheel_spacing}" offset_y = "-${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}"/> -->



        
    <gazebo>   
      <plugin name="diffdrive_plugin_multiwheel" filename="libdiffdrive_plugin_multi_wheel.so">                
        <alwaysOn>true</alwaysOn>
        <updateRate>100.0</updateRate>
        <leftJoints>left_0_wheel_joint left_1_wheel_joint left_2_wheel_joint left_3_wheel_joint left_4_wheel_joint</leftJoints>
        <rightJoints>right_0_wheel_joint right_1_wheel_joint right_2_wheel_joint right_3_wheel_joint right_4_wheel_joint</rightJoints>
        <wheelSeparation>${wheel_offset_y*2}</wheelSeparation>
        <wheelDiameter>${wheel_radius*2}</wheelDiameter>
        <torque>50000</torque>
        <interface:position name="position_iface_2"/>
        <robotNamespace>/</robotNamespace>
        <robotBaseFrame>base_link</robotBaseFrame>
        <topicName>cmd_vel</topicName>
        <commandTopic>/cmd_vel</commandTopic>
        <odometryTopic>odom</odometryTopic>
        <odometryFrame>odom</odometryFrame>
        <broadcastTF>1</broadcastTF>
        <publishWheelTF>true</publishWheelTF>
        <publishWheelJointState>true</publishWheelJointState>
        <publishOdometryTf>1</publishOdometryTf>
        <publishOdometryMsg>1</publishOdometryMsg>
      </plugin>
        
      <plugin name="p3d_base_controller" filename="libgazebo_ros_p3d.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>50.0</updateRate>
        <bodyName>base_link</bodyName>
        <topicName>ground_truth/state</topicName>
        <gaussianNoise>0.01</gaussianNoise>
        <frameName>world</frameName>
        <xyzOffsets>0 0 0</xyzOffsets>
        <rpyOffsets>0 0 0</rpyOffsets>
      </plugin>

      <plugin name="imu_controller" filename="libhector_gazebo_ros_imu.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>50.0</updateRate>
        <bodyName>base_link</bodyName>
        <topicName>imu_quat</topicName>
        <accelDrift>0.0 0.0 0.0</accelDrift>
        <accelGaussianNoise>0.1 0.1 0.1</accelGaussianNoise>
        <rateDrift>0.0 0.0 0.0</rateDrift>
        <rateGaussianNoise>0.05 0.05 0.05</rateGaussianNoise>
        <headingDrift>0.0</headingDrift>
        <headingGaussianNoise>0.05</headingGaussianNoise>
      </plugin>     
    </gazebo>
        
    <gazebo reference="base_link">
        <material>Gazebo/Orange</material>
    </gazebo>
            
  </xacro:macro>
</robot>
